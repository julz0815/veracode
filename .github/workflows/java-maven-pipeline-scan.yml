name: Veracode Static Code Analysis

run-name: ${{ github.event.client_payload.repository.name }}

on:
  repository_dispatch:
    types: [java-maven-pipeline-scan]

# env:
#   workflow_name: 'my-workflow'
env:
  workflow_name: 'java-maven-build'

jobs:
  register:
    runs-on: ubuntu-latest
    steps:
    - uses: vincent-deng/veracode-github-app@aws-ecs-dynamodb
      with:
        callback_url: ${{ github.event.client_payload.callback_url }}
        sha: ${{ github.event.client_payload.sha }}
        run_id: ${{ github.run_id }}
        repository_owner: ${{ github.event.client_payload.repository.owner }}
        repository_name: ${{ github.event.client_payload.repository.name }}
        name: "Central markdown check"
        enforce: true
        
  build:
    needs: [register]
    runs-on: ubuntu-latest
    outputs:
      veracode_scan_artifact: ${{ steps.identify.outputs.veracode_scan_artifact }}
    steps:
    - uses: actions/checkout@v3
      with:
        repository: ${{ github.event.client_payload.repository.full_name }}
        ref: ${{ github.event.client_payload.sha }}
        token: ${{ github.event.client_payload.token }}
    - uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Cache Maven Dependencies
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
    - name: Build with Maven
      run: mvn clean package
      
    - name: Identify the Artifact
      id: identify
      run: |
        jar_files=$(find target -name "*.jar" -type f -maxdepth 1 -exec basename {} \;)
        war_files=$(find target -name "*.war" -type f -maxdepth 1 -exec basename {} \;)
        ear_files=$(find target -name "*.ear" -type f -maxdepth 1 -exec basename {} \;)
        if [ ! -z "$jar_files" ]; then
          artifact_file=$jar_files
        elif [ ! -z "$war_files" ]; then
          artifact_file=$war_files
        elif [ ! -z "$ear_files" ]; then
          artifact_file=$ear_files
        else
          echo "no files found"
        fi
        echo $artifact_file
        echo "veracode_artifact=$artifact_file" >> $GITHUB_ENV
        echo "::set-output name=veracode_scan_artifact::$artifact_file"
        
    - uses: actions/upload-artifact@v3
      with:
        name: veracode-artifact
        path: target/${{ env.veracode_artifact }}
        
#   build:
#     needs: register
#     if: needs.register.waspreview == 'java-maven-policy-scan1'
#     uses: ./.github/workflows/${{needs.register.waspreview}}.yml
#     uses: ./.github/workflows/java-maven-build.yml
#     with:
#       repository: ${{ github.event.client_payload.repository.full_name }}
#       ref: ${{ github.event.client_payload.sha }}
#       token: ${{ github.event.client_payload.token }}
#     if: needs.register.waspreview == 'java-maven-policy-scan1'
#     uses: ./.github/workflows/java-maven-build.yml
#     with:
#       repository: ${{ github.event.client_payload.repository.full_name }}
#       ref: ${{ github.event.client_payload.sha }}
#       token: ${{ github.event.client_payload.token }}
    
#     runs-on: ubuntu-latest
#     steps:
# #       - uses: actions/checkout@v3
#       - name: Build Artifact
#         uses: ${{ github.event.client_payload.repository.owner }}/veracode/.github/actions/java-maven
#         with:
#           repository: ${{ github.event.client_payload.repository.full_name }}
#           ref: ${{ github.event.client_payload.sha }}
#           token: ${{ github.event.client_payload.token }}













  pipeline_scan:
    # needs the build step before this job will start running
    needs: build
#     runs-on: ubuntu-latest
    uses: ./.github/workflows/veracode-pipeline-scan.yml
#     name: pipeline scan

#     steps:
# #       - name: test artifact file
# #         run: | 
# #           echo ${{ needs.build.outputs.veracode_scan_artifact }}
#       - name: checkout repo
#         uses: actions/checkout@v3
      
#       # get the compiled binary from a previous job
#       - name: get archive
#         uses: actions/download-artifact@v3
#         with:
#           name: veracode-artifact

#       # run the pipeline scan action
#       - name: Veracode Pipeline-Scan
#         id: pipeline-scan
#         uses: veracode/Veracode-pipeline-scan-action@pipeline-scan-beta-v0.0.4
#         with:
#           vid: ${{ secrets.API_ID }}
#           vkey: ${{ secrets.API_KEY }}
#           file: ${{ needs.build.outputs.veracode_scan_artifact }}
#           fail_build: true
